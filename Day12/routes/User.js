const mongoose=require('mongoose')
const express=require('express');
const router=express.Router();
const Otp=require('../models/Otp')
const checkauthorization=require('../checkauthorization')
const {Auth}=require('two-step-auth')
const Userr=require('../models/Users');
const multer = require("multer");
var upload = multer({ dest: __dirname + '/nicdegree/' }); //setting the default folder for multer
const fs=require('fs')
const checktaskstatus=require('../checktaskstatus')

//get all users
router.get('/users',async(req,res)=>{
    const users =await Userr.find();
    res.json(users)
})

//signup and creating a new user
router.post('/usersignup',(req,res)=>{
    const emaill=req.body.email;
            (async function login() {
                
                const result = await Auth(emaill);
                console.log(result);
                console.log(result.mail);
                console.log(result.OTP);
                //saving otp code to otp schema
                const newOtp=new Otp({email:result.mail,otpcode:result.OTP})
                const savedOtp=await newOtp.save();
                console.log(savedOtp)

                console.log(result.success);

                //saving user to user schema
                const newUser=new Userr(req.body)
                const savedUser=await newUser.save();
                res.json(savedUser)
                
            })();
                        
        })
 
//Delete User
router.delete('/deleteuser',async(req,res)=>{
    const id=req.body.id;
    const deletespecific=await Userr.findByIdAndDelete(id)
    res.json(deletespecific)
})

//View otp
router.get('/viewotpcodes',async(req,res)=>{
    const viewotp=await Otp.find();
    res.json(viewotp)
})

//Verify otp and update users array
router.put('/verify',(req,res)=>{
    console.log('body->',req.body)
    if(req.body.email!==undefined && req.body.otpnumber!==undefined)
    {
        Otp.findOne({email:req.body.email,otpcode:req.body.otpnumber},(err,doc)=>{
            if(err) return res.json({message:"Failed",err})
            else
            {
                if(doc!==null)
                {
                   // const updatespecific= User.updateOne({email:req.body.email},{$set:{Authorize:{$eq:true}}})
                    //res.json(updatespecific)
                    Userr.findOneAndUpdate({email:req.body.email},{Authorize:true},{new:true},(error,user)=>{
                        if(error)return res.json({message:"Failed",error})
                        else{
                            return res.json({messageL:"success",otp:doc,user:user})
                        }
                    })
                }
                else
                {
                    return res.json("Invalid OTP or email")
                }
            }
        })
    }
    else
    {
        return res.json({message:"Failed",Error:"OTP and Email are required"})
    }
})


// router.use(checkauthorization);
//login route
router.get('/login',checkauthorization,async(req,res)=>{
    const email=req.body.email;
    res.send('user login')
})


//get tasks
router.get('/gettasks',(req,res)=>{

    // if(req.body.email!==undefined)
    // {
    //     Users.findOne({skills:req.body.email,Authorize:true},(err,doc)=>{
    //         if(err) return res.json({message:"Failed",err})
    //         else
    //         {
    //             if(doc!==null)
    //             {
    //                // const updatespecific= User.updateOne({email:req.body.email},{$set:{Authorize:{$eq:true}}})
    //                 //res.json(updatespecific)
    //                 User.findOneAndUpdate({email:req.body.email},{Authorize:true},{new:true},(error,data)=>{
    //                     if(error)return res.json({message:"Failed",error})
    //                     else{
    //                         return res.json({messageL:"success",user:data})
    //                     }
    //                 })
    //             }
    //             else
    //             {
    //                 return res.json("Not authorized")
    //             }
    //         }})}
        })
        

        //upload nic and degree
        router.post('/upload',upload.single("image"),(req,res)=>{
        //below code will read the data from the upload folder. Multer will automatically upload the file in that folder with an  autogenerated name
        fs.readFile(req.file.path, (err, contents) => {
        if (err) 
        {
            return res.json(handleErr(err))
        } 
        else 
        {
            if(req.body.email!==undefined)
            {
            let data= req.body.image
            data = req.file.filename
            console.log('data->',data)
           
            Userr.findOneAndUpdate({email:req.body.email},{image:data},(err,user)=>{
                if(user==null){
                return res.json({message:"User not found",err})}
                else
                {
                    return res.json({message:"success",user:user})
                }
            })
                
            }
            else
            {
            return res.json({message:"please give email"})
            }
        }
    })
})




 //one tasks performed next time another task will be shown also add $5 to amount
 router.get('/tasksperformed',checktaskstatus,(req,res)=>{
    if(req.body.email!==undefined){
        Userrr.findOne({email:req.body.email},(err,content)=>{
            if(content==null)
            {
                return res.json({message:"user not found",err})
            }
            else
            {
                Tasks.find({taskname:req.body.taskname},(err,data)=>{
                    if(data==null){
                        return res.json({message:"taskname not found",err})
                    }
                    else
                    {
                        Tasks.findOneAndUpdate({taskname:req.body.taskname},{performed:true},{new:true},(err,task)=>{
                            if(task!==null){
                                var amountt=5;
                                Userrr.findOneAndUpdate({email:req.body.email},{$inc:{amount:5}},(err,user)=>{
                                    return res.json({message:"Task Done",task,user})
                                })
                                
                            }
                            else
                            {
                                res.json({message:"Not updated",task,user})
                            }
                        })
                    }
                })
            }
        })
    }
    else
    {
        return res.json({message:"please give email"})
    }
})

//show skills by matching through tasks model
router.get('/showSkills',(req,res)=>{
    if(req.body.email){
        let {email} = req.body
        Userrr.findOne({email},(err,doc)=>{
            if(err)return res.json({message:"Failed",err})
            else{
                console.log('doc->',doc)
                if(doc!==null){
                    Tasks.find({skills:{$in:doc.skills}},(error,content)=>{
                        if(error)return res.json({message:"Failed",error})
                        else{
                            console.log(content)
                            return res.json({message:"success",content})
                        }
                    })
                }
                else{
                    return res.json({message:"User failed"})
                }
            }
        })
    }
})

module.exports=router;